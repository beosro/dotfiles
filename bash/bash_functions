# Chef functions {{{
function knhost() {
  sed -e 's/.*://' -e 's/.*items found//'
}

function knifeaws() {
  knife search node "tags:${@} OR name:${@} OR roles:${@}" -a cloud.public_hostname | knhost
}

function knifeome() {
  knife search node "tags:${@} OR name:${@} OR roles:${@}" -a hostname | sort | knhost
}

function knaws() {
  for i in "$@"; do
    for j in `knifeaws "$i"`; do
      ssh $j
    done
  done
}

function knome() {
  tmux new-window -n $1
  for node in `knifeome "$1"`; do
    tmux split-window -t :$ "ssh $node"
    tmux select-layout -t :$ even-vertical >/dev/null 2>&1
  done
  tmux kill-pane -t $.1
  tmux select-layout -t :$ even-vertical >/dev/null 2>&1
  tmux set-window-option -t :$ synchronize
}

function kick() {
  knife ssh "name:$1*" "sudo /etc/init.d/chef-client restart"
}

function ktags() {
  knife search "tags:*${@}*" -a name -a tags
}

function kshow() {
  host $1.campus.ksu.edu >/dev/null 2>&1 && knife node show $1.campus.ksu.edu
  host $1.ads.campus >/dev/null 2>&1 && knife node show $1.ads.campus
  host $1.users.campus >/dev/null 2>&1 && knife node show $1.users.campus
}

# }}}
# Remove bad key from known_hosts file {{{
function badkey() {
  vim ~/.ssh/known_hosts +"$*d|x"
}

# }}}
# Git function {{{
function gg() {
  git commit -m "$*"
}

# }}}
# Dash functions {{{
# Open argument in Dash
function dash() {
  open dash://$*
}

function dman() {
  open dash://manpages:$*
}

function dchef() {
  open dash://chef:$*
}

# }}}
# compressed file expander {{{
# (from https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh)
ex() {
  if [[ -e $1 ]]; then
    case $1 in
      *.tar.bz2) tar xvjf $1;;
      *.tar.gz) tar xvzf $1;;
      *.tar.xz) tar xvJf $1;;
      *.tar.lzma) tar --lzma xvf $1;;
      *.bz2) bunzip $1;;
      *.rar) unrar $1;;
      *.gz) gunzip $1;;
      *.tar) tar xvf $1;;
      *.tbz2) tar xvjf $1;;
      *.tgz) tar xvzf $1;;
      *.zip) unzip $1;;
      *.Z) uncompress $1;;
      *.7z) 7z x $1;;
      *.dmg) hdiutul mount $1;; # mount OS X disk images
      *) echo "'$1' cannot be extracted via >ex<";;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# }}}
# Find files and exec commands at them. {{{
# $ find-exec .coffee cat | wc -l
# # => 9762
# from https://github.com/paulmillr/dotfiles
function find-exec() {
  find . -type f -iname "*${1:-}*" -exec "${2:-file}" '{}' \;
}

# }}}
# Count code lines in some directory. {{{
# $ loc py js css
# # => Lines of code for .py: 3781
# # => Lines of code for .js: 3354
# # => Lines of code for .css: 2970
# # => Total lines of code: 10105
# from https://github.com/paulmillr/dotfiles
function loc() {
  local total
  local firstletter
  local ext
  local lines
  total=0
  for ext in $@; do
    firstletter=$(echo $ext | cut -c1-1)
    if [[ firstletter != "." ]]; then
      ext=".$ext"
    fi
    lines=`find-exec "*$ext" cat | wc -l`
    lines=${lines// /}
    total=$(($total + $lines))
    echo "Lines of code for ${fg[blue]}$ext${reset_color}: ${fg[green]}$lines${reset_color}"
  done
  echo "${fg[blue]}Total${reset_color} lines of code: ${fg[green]}$total${reset_color}"
}

# }}}
# Show how much RAM application uses. {{{
# $ ram safari
# # => safari uses 154.69 MBs of RAM.
# from https://github.com/paulmillr/dotfiles
function ram() {
  local sum
  local items
  local app="$1"
  if [[ -z "$app" ]]; then
    echo "First argument - pattern to grep from processes"
  else
    sum=0
    for i in `ps aux | grep -i "$app" | grep -v "grep" | awk '{print $6}'`; do
      sum=$(($i + $sum))
    done
    sum=$(echo "scale=2; $sum / 1024.0" | bc)
    if [[ $sum != "0" ]]; then
      echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM."
    else
      echo "There are no processes with pattern '${fg[blue]}${app}${reset_color}' are running."
    fi
  fi
}

# }}}
# any function {{{
# from http://onethingwell.org/post/14669173541/any
# search for running processes
any() {
    emulate -L zsh
    unsetopt KSH_ARRAYS
    if [[ -z "$1" ]] ; then
        echo "any - grep for process(es) by keyword" >&2
        echo "Usage: any " >&2 ; return 1
    else
        ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
    fi
}

# }}}
# display a neatly formatted path {{{
path() {
local blue="\033[1;34m"
local green="\033[0;32m"
local cyan="\033[0;36m"
local purple="\033[0;35m"
local brown="\033[0;33m"
local reset_color="\033[0m"
  echo $PATH | tr ":" "\n" | \
    awk "{ sub(\"/usr\",   \"$green/usr$reset_color\"); \
           sub(\"/bin\",   \"$blue/bin$reset_color\"); \
           sub(\"/opt\",   \"$cyan/opt$reset_color\"); \
           sub(\"/sbin\",  \"$purple/sbin$reset_color\"); \
           sub(\"/local\", \"$brown/local$reset_color\"); \
           print }"
}

# }}}
# Mac specific functions {{{
myos=`uname -s`
if [[ "myos" == "Darwin" ]]; then

  # view man pages in Preview
  pman() { ps=`mktemp -t manpageXXXX`.ps ; man -t $@ > "$ps" ; open "$ps" ; }

  # function to show interface IP assignments
  ips() { foo=`/Users/mark/bin/getip.py; /Users/mark/bin/getip.py en0; /Users/mark/bin/getip.py en1`; echo $foo; }

  # notify function - http://hints.macworld.com/article.php?story=20120831112030251
  notify() { automator -D title=$1 -D subtitle=$2 -D message=$3 ~/Library/Workflows/DisplayNotification.wflow ; }

fi

# }}}
# nice mount {{{
# (http://catonmat.net/blog/another-ten-one-liners-from-commandlingfu-explained)
# displays mounted drive information in a nicely formatted manner
function nicemount() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2="";1') | column -t ; }

# }}}
# myIP address {{{
function myip() {
  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0       : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

# }}}
# (s)ave or (i)nsert a directory. {{{
s() { pwd > ~/.save_dir ; }
i() { cd "$(cat ~/.save_dir)" ; }

# }}}
# console function {{{
function console () {
  if [[ $# > 0 ]]; then
    query=$(echo "$*"|tr -s ' ' '|')
    tail -f /var/log/system.log|grep -i --color=auto -E "$query"
  else
    tail -f /var/log/system.log
  fi
}

# }}}
# shell function to define words {{{
# http://vikros.tumblr.com/post/23750050330/cute-little-function-time
givedef() {
  if [[ $# -ge 2 ]]; then
    echo "givedef: too many arguments" >&2
    return 1
  else
    curl "dict://dict.org/d:$1"
  fi
}

# }}}
# ps with a grep {{{
# from http://hiltmon.com/blog/2013/07/30/quick-process-search/
function psax() {
  ps auxwwwh | grep "$@" | grep -v grep
}

function psg() {
  ps -ef | grep -i "$@" | grep -v grep
}

# }}}
# turn hidden files on/off in Finder {{{
function hiddenOn() {
  defaults write com.apple.Finder AppleShowAllFiles YES
}
function hiddenOff() {
  defaults write com.apple.Finder AppleShowAllFiles NO
}

# }}}
# Stolen from Jessie Frazelle {{{
# https://github.com/jfrazelle/dotfiles/blob/master/.functions

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
  tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
v() {
  if [ $# -eq 0 ]; then
    vim .
  else
    vim "$@"
  fi
}

# Create a new directory and enter it
mkd() {
  mkdir -p "$@" && cd "$@"
}

# Call from a local repo to open the repository on github/bitbucket in browser
repo() {
  local giturl=$(git config --get remote.origin.url | sed 's/git@/\/\//g' | sed 's/.git$//' | sed 's/https://g' | sed 's/:/\//g')
  if [[ $giturl == "" ]]; then
    echo "Not a git repository or no remote.origin.url is set."
  else
    local gitbranch=$(git rev-parse --abbrev-ref HEAD)
    local giturl="http:${giturl}"

    if [[ $gitbranch != "master" ]]; then
      local giturl="${giturl}/tree/${gitbranch}"
    fi

    echo $giturl
    open $giturl
  fi
}

# Function to create aliases
new-alias() {
  local last_command=$(echo `history |tail -n2 |head -n1` | sed 's/[0-9]* //')
  echo alias $1="'""$last_command""'" >> ~/.bash_aliases
  . ~/.bash_profile
}

# }}}
# Colorize Man {{{
man() {
  env \
    LESS_TERMCAP_md=$'\E[1;36m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[1;40;92m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[1;32m' \
      man "$@"
}

# }}}
# Base16 helpers {{{
#

BASE16_CONFIG=~/.vim/.base16

# Takes a hex color in the form of "RRGGBB" and outputs its luma (0-255, where
# 0 is black and 255 is white).
#
# Based on: https://github.com/lencioni/dotfiles/blob/b1632a04/.shells/colors
# luma() {
#   local COLOR_HEX=$1
#
#   if [ -z "$COLOR_HEX" ]; then
#     echo "Missing argument hex color (RRGGBB)"
#     return 1
#   fi
#
#   # Extract hex channels from background color (RRGGBB).
#   local COLOR_HEX_RED=$(echo "$COLOR_HEX" | cut -c 1-2)
#   local COLOR_HEX_GREEN=$(echo "$COLOR_HEX" | cut -c 3-4)
#   local COLOR_HEX_BLUE=$(echo "$COLOR_HEX" | cut -c 5-6)
#
#   # Convert hex colors to decimal.
#   local COLOR_DEC_RED=$((16#$COLOR_HEX_RED))
#   local COLOR_DEC_GREEN=$((16#$COLOR_HEX_GREEN))
#   local COLOR_DEC_BLUE=$((16#$COLOR_HEX_BLUE))
#
#   # Calculate perceived brightness of background per ITU-R BT.709
#   # https://en.wikipedia.org/wiki/Rec._709#Luma_coefficients
#   # http://stackoverflow.com/a/12043228/18986
#   local COLOR_LUMA_RED=$((0.2126 * $COLOR_DEC_RED))
#   local COLOR_LUMA_GREEN=$((0.7152 * $COLOR_DEC_GREEN))
#   local COLOR_LUMA_BLUE=$((0.0722 * $COLOR_DEC_BLUE))
#
#   local COLOR_LUMA=$(($COLOR_LUMA_RED + $COLOR_LUMA_GREEN + $COLOR_LUMA_BLUE))
#
#   echo "$COLOR_LUMA"
# }

color() {
  local SCHEME="$1"
  # local BASE16_DIR=~/.zsh/base16-shell/scripts
  local BASE16_DIR=~/.config/base16-shell/scripts

  if [ $# -eq 0 ]; then
    if [ -s "$BASE16_CONFIG" ]; then
      cat ~/.vim/.base16
      return
    else
      SCHEME=help
    fi
  fi

  case "$SCHEME" in
  help)
    echo 'color [tomorrow-night|ocean|grayscale-light|...]'
    echo
    echo 'Available schemes:'
    color ls
    ;;
  ls)
    find "$BASE16_DIR" -name 'base16-*.sh' | \
      sed -E 's|.+/base16-||' | \
      sed -E 's/\.sh//' | \
      column
      ;;
  *)
    FILE="$BASE16_DIR/base16-$SCHEME.sh"
    if [[ -e "$FILE" ]]; then
      local BG=$(grep color_background= "$FILE" | cut -d \" -f2 | sed -e 's#/##g')
      local LUMA=$(luma "$BG")
      local LIGHT=$((LUMA > 127.5))
      local BACKGROUND=dark
      if [ "$LIGHT" -eq 1 ]; then
        BACKGROUND=light
      fi

      echo "$SCHEME" >! "$BASE16_CONFIG"
      echo "$BACKGROUND" >> "$BASE16_CONFIG"
      sh "$FILE"

      if [ -n "$TMUX" ]; then
        local CC=$(grep color18= "$FILE" | cut -d \" -f2 | sed -e 's#/##g')
        if [ -n "$BG" -a -n "$CC" ]; then
          command tmux set -a window-active-style "bg=#$BG"
          command tmux set -a window-style "bg=#$CC"
          command tmux set -g pane-active-border-bg "#$CC"
          command tmux set -g pane-border-bg "#$CC"
        fi
      fi
    else
      echo "Scheme '$SCHEME' not found in $BASE16_DIR"
      return 1
    fi
    ;;
  esac

}

function () {
  if [[ -s "$BASE16_CONFIG" ]]; then
    local SCHEME=$(head -1 "$BASE16_CONFIG")
    local BACKGROUND=$(sed -n -e '2 p' "$BASE16_CONFIG")
    if [ "$BACKGROUND" != 'dark' -a "$BACKGROUND" != 'light' ]; then
      echo "warning: unknown background type in $BASE16_CONFIG"
    fi
    color "$SCHEME"
  else
    # Default.
    # color tomorrow-night
    color material-dark
  fi
}

# }}}
# Jekyll helpers {{{
draft() {
  rake draft["$1"]
}
publish() {
  rake publish
}
deploy() {
  rake deploy
}
build() {
  rake build
}

# }}}
# mtr function {{{
netwtf() {
  if [[ "$myos" == "Darwin" ]]; then
    local mtrpath="/usr/local/Cellar/mtr/**/sbin"
  else
    local mtrpath="/usr/bin"
  fi
  sudo $mtrpath/mtr -b -o "LSD NBAW JX" 8.8.8.8
}

# }}}
